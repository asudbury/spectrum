<table id="appointmentsGrid" class="table table-condensed table-hover table-striped">
    <thead>
        <tr>
            <th data-column-id="startTime" data-formatter="startTime" data-header-align="center" data-align="center">Date</th>
            <th data-column-id="status" data-header-align="center" data-align="center">Status</th>
            <th data-column-id="clientName" data-header-align="center" data-align="center" data-formatter="client">Client</th>
            <th data-column-id="location" data-header-align="center" data-align="center" data-formatter="location">Location</th>
            <th data-column-id="description" data-header-align="center" data-align="center">Description</th>
            <th data-column-id="actions" data-header-align="center" data-align="center" data-formatter="actions">Commands</th>
        </tr>
    </thead>
</table>

<script>

    var appointmentsGrid = $("#appointmentsGrid").bootgrid({
        labels: {
            noResults: "No appointments found"
        },
        searchSettings: {
            delay: 100,
            characters: 1
        },
        templates: {

            header: "<div id=\"{{ctx.id}}\" class=\"{{css.header}}\">" +
                        "<div class=\"row\">" +
                        "<h2 class=\"partial-title\">Appointments</h2>" +
                        "</div>" +
                        "<div class=\"row\">" +
                            "<div class=\"col-sm-12 actionBar\">" +
                                "<p class=\"{{css.search}}\"></p>" +
                                "<p class=\"{{css.actions}}\">" +
                                "</p>" +
                            "</div>" +
                        "</div>" +
                    "</div>"
        },
        ajax: true,
        requestHandler: function (request) {
            request.sortItems = [];
            if (request.sort == null)
                return request;
            for (var property in request.sort) {
                if (request.sort.hasOwnProperty(property)) {
                    request.sortItems.push({ Field: property, Type: request.sort[property] });
                }
            }
            return request;
        },
        url: "/umbraco/Surface/Appointments/GetBootGridAppointments",
        formatters: {
            "startTime": function (column, row) {

                var today = moment();

                if (moment(row.startTime).isSame(today, 'day')) {
                    return "<b>Today " + moment(row.startTime).format('HH:mm') + "</b>";
                }

                return moment(row.startTime).format('ddd DD MMM HH:mm');
            },
            "location": function(column, row) {
                if (row.location) {
                    return '<a href=' + row.googleSearchUrl + '>' + row.location + '</a>';
                }

                return '';
            },
            "client": function (column, row) {
                return '<a href=' + row.clientUrl + '>' + row.clientName + '</a>';
            },
            "actions": function (column, row) {
                return '<a href="' + row.viewAppointmentUrl + '"class="link-view-appointment">View</a>';
            }
        }
    }).on("loaded.rs.jquery.bootgrid", function () {

        appointmentsGrid.find(".link-payment").on("click",
            function(e) {
                var transactionsId = $(this).data("payment-id");
                event.preventDefault();

                $.ajax({
                     url: '/umbraco/Surface/Braintree/ViewTransaction/' + transactionsId,
                    success: function(data) {
                        onTransaction(data);
                    }
                });
            });
    });

</script>

<div id="transaction"></div>

<script type="text/javascript">

    function onTransaction(data) {
        jQuery('#transaction').html(data);
        jQuery('#transaction').dialog({ 'title': 'Payment', 'width': 400, 'height': 300 });
    }

</script>